<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jingchen XIE</title>
  
  <subtitle>Welcome to my first nest :)</subtitle>
  <link href="https://cyanky.github.io/atom.xml" rel="self"/>
  
  <link href="https://cyanky.github.io/"/>
  <updated>2022-07-08T14:30:21.797Z</updated>
  <id>https://cyanky.github.io/</id>
  
  <author>
    <name>Jingchen XIE</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTTP</title>
    <link href="https://cyanky.github.io/posts/a1ede006/"/>
    <id>https://cyanky.github.io/posts/a1ede006/</id>
    <published>2022-07-08T14:23:50.000Z</published>
    <updated>2022-07-08T14:30:21.797Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Hypertext Transfer Protocol (HTTP)</strong> is a protocol that provides a standardized way for computers to communicate with each other. It has been the foundation for data communication over the internet since 1990 and is integral to understanding how client-server communication functions.</p><p>In this lesson, we’ll discuss key features and elements of HTTP.</p><h2 id="Features"><a href="#Features" class="headerlink" title="Features:"></a>Features:</h2><ul><li><strong>Connectionless:</strong> When a request is sent, the client opens the connection; once a response is received, the client closes the connection. The client and server only maintain a connection during the response and request. Future responses are made on a new connection.</li><li><strong>Stateless:</strong> There is no dependency between successive requests.</li><li><strong>Not Sessionless:</strong> Utilizing headers and cookies, sessions can be created to allow each HTTP request to share the same context.</li><li><strong>Media Independent:</strong> Any type of data can be sent over HTTP as long as both the client and server know how to handle the data format. In our case, we’ll use JSON.</li></ul><h2 id="Elements"><a href="#Elements" class="headerlink" title="Elements:"></a>Elements:</h2><ul><li><p>Universal Resource Identifiers (URIs):</p><p>An example URI is</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>www.example.com<span class="regexp">/tasks/</span>term=homework</span><br></pre></td></tr></table></figure><p>. It has certain components:</p><ul><li><p><strong>Scheme:</strong> specifies the protocol used to access the resource, HTTP or HTTPS. In our example <code>http</code>.</p></li><li><p><strong>Host:</strong> specifies the host that holds the resources. In our example <code>www.example.com</code>.</p></li><li><p><strong>Path:</strong> specifies the specific resource being requested. In our example, <code>/tasks</code>.</p></li><li><p><strong>Query:</strong> an optional component, the query string provides information the resource can use for some purpose such as a search parameter. In our example, <code>/term=homework</code>.</p></li></ul></li></ul><blockquote><h3 id="Side-Note-URI-vs-URL"><a href="#Side-Note-URI-vs-URL" class="headerlink" title="Side Note: URI vs URL"></a>Side Note: URI vs URL</h3><p>You may be unsure what the difference is between a <strong>URI</strong> (<strong>Universal Resource Identifier</strong>) and a <strong>URL</strong> (<strong>Universal Resource Locator</strong>). These terms tend to get confused a lot, and are even frequently used interchangeably—but there is a distinction.</p><p>The term <em>URI</em> can refer to any <strong>identifier</strong> for a resource—for example, it could be either the <em>name</em> of a resource or the <em>address</em> of a resource (since both the name and address are <em>identifiers</em> of that resource). In contrast, <em>URL</em> only refers to the <em>location</em> of a resource—in other words, it only ever refers to an <em>address</em>.</p><p>So, “URI” could refer to a name or an address, while “URL” only refers to an address. Thus, <strong>URLs are a specific type of URI</strong> that is used to locate a resource on the internet when a client makes a request to a server.</p><p>And if you really want to dive into the topic, here are some further readings (with examples and Venn diagrams):</p><ul><li><a href="https://webmasters.stackexchange.com/questions/19101/what-is-the-difference-between-a-uri-and-a-url">StackExchange: What is the difference between a URI and a URL?</a></li><li><a href="https://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn">StackOverflow: What is the difference between a URI, a URL, and a URN?</a></li><li><a href="https://www.ietf.org/rfc/rfc3986.txt">RFC 3986</a>, published by the <a href="https://en.wikipedia.org/wiki/Internet_Engineering_Task_Force">Internet Engineering Taskforce</a> (this one is rather hefty and more of an official reference than a reader-friendly explanation)</li></ul></blockquote>]]></content>
    
    
    <summary type="html">Hypertext Transfer Protocol (HTTP) is a protocol that provides a standardized way for computers to communicate with each other. It has been the foundation for data communication over the internet since 1990 and is integral to understanding how client-server communication functions.</summary>
    
    
    
    <category term="Server Deployment" scheme="https://cyanky.github.io/categories/Server-Deployment/"/>
    
    
    <category term="Server Deployment" scheme="https://cyanky.github.io/tags/Server-Deployment/"/>
    
  </entry>
  
  <entry>
    <title>CI/CD by AWS Services</title>
    <link href="https://cyanky.github.io/posts/d7d610e1/"/>
    <id>https://cyanky.github.io/posts/d7d610e1/</id>
    <published>2022-07-06T03:15:15.000Z</published>
    <updated>2022-07-06T03:20:52.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CodeBuild-An-AWS-Continuous-Integration-service"><a href="#CodeBuild-An-AWS-Continuous-Integration-service" class="headerlink" title="CodeBuild: An AWS Continuous Integration service"></a>CodeBuild: An AWS Continuous Integration service</h1><h2 id="Continuous-Integration-The-first-part-of-Continuous-Delivery"><a href="#Continuous-Integration-The-first-part-of-Continuous-Delivery" class="headerlink" title="Continuous Integration: The first part of Continuous Delivery"></a>Continuous Integration: The first part of Continuous Delivery</h2><ul><li>Continuous Integration: frequent check-ins to a central repository which trigger automated builds and tests. In this stage, we need to code, compile, test and package.</li><li>CodeBuild: A fully managed continuous integration system offered by AWS</li><li>Codebuild can be added as an action to a CodePipeline stage</li><li>General information about CodeBuild can be found <a href="https://aws.amazon.com/codebuild/">here</a>.</li><li>AWS instructions on how to create a pipeline with CodeBuild and CodePipeline can be found <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/how-to-create-pipeline.html">here</a>.</li><li>Documentation on Buildspec files can be found <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html">here</a></li></ul><p>The instructions that a CodeBuild stage will follow are put in a build spec file named <code>buildspec.yml</code>. This file contains all of the commands that the build will run and any related settings. Amazon supplies <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/samples.html">CodeBuild samples</a>, you can see examples of build spec files there. The sample for a simple Docker custom image has the build spec:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">version:</span> <span class="number">0.2</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">phases:</span></span><br><span class="line"><span class="symbol">  install:</span></span><br><span class="line"><span class="symbol">    commands:</span></span><br><span class="line">      - nohup <span class="keyword">/usr/</span>local<span class="keyword">/bin/</span>dockerd --<span class="attr">host</span><span class="operator">=</span>unix:<span class="comment">///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2&amp;</span></span><br><span class="line">      - timeout <span class="number">15</span> sh -c <span class="string">&quot;until docker info; do echo .; sleep 1; done&quot;</span></span><br><span class="line"><span class="symbol">  pre_build:</span></span><br><span class="line"><span class="symbol">    commands:</span></span><br><span class="line">      - docker build -t helloworld .</span><br><span class="line"><span class="symbol">  build:</span></span><br><span class="line"><span class="symbol">    commands:</span></span><br><span class="line">      - docker images</span><br><span class="line">      - docker run helloworld echo <span class="string">&quot;Hello, World!&quot;</span> </span><br></pre></td></tr></table></figure><p>You can see that it is divided into the phases ‘install’, ‘pre_build’, and ‘build’. Each phase contains commands, which are the same commands you would use to run Docker locally. You can read about the build spec syntax <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec-ref-syntax">here</a></p><h1 id="CodePipeline"><a href="#CodePipeline" class="headerlink" title="CodePipeline"></a>CodePipeline</h1><h2 id="Continuous-Delivery-Automating-the-preparation-of-code-for-release"><a href="#Continuous-Delivery-Automating-the-preparation-of-code-for-release" class="headerlink" title="Continuous Delivery: Automating the preparation of code for release"></a>Continuous Delivery: Automating the preparation of code for release</h2><h2 id="Continuous-Delivery"><a href="#Continuous-Delivery" class="headerlink" title="Continuous Delivery"></a>Continuous Delivery</h2><ul><li><p>Used for small incremental releases or frequent releases</p></li><li><p>Automates code compilation, testing and packaging</p></li><li><p>May involve human QA before final release or automated release to production</p></li><li><h2 id="CodePipeline-1"><a href="#CodePipeline-1" class="headerlink" title="CodePipeline"></a>CodePipeline</h2><ul><li>Controls the release process through user defined pipelines</li><li>Pipelines are created either through the CodePipeline console or using awscli</li><li>Pipelines watch a source code repository, changes to this repository trigger pipeline action</li><li>Pipelines are made up of stages</li><li>Each stage consists of one or more actions</li><li>There are actions to define the source repository, as well as instructions for testing, building, deploying and options for approval</li><li>Pipelines can be managed and viewed in the <a href="https://us-east-2.console.aws.amazon.com/codesuite/codepipeline/pipelines/">CodePipeline console</a></li></ul></li></ul>]]></content>
    
    
    <summary type="html">CodeBuild &amp; CodePipeline</summary>
    
    
    
    <category term="Server Deplovment" scheme="https://cyanky.github.io/categories/Server-Deplovment/"/>
    
    
    <category term="Server Deplovment" scheme="https://cyanky.github.io/tags/Server-Deplovment/"/>
    
  </entry>
  
  <entry>
    <title>AWS-CloudFormation</title>
    <link href="https://cyanky.github.io/posts/4d8d16f5/"/>
    <id>https://cyanky.github.io/posts/4d8d16f5/</id>
    <published>2022-07-03T14:21:06.000Z</published>
    <updated>2022-07-03T14:23:23.417Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AWS-CloudFormation"><a href="#AWS-CloudFormation" class="headerlink" title="AWS CloudFormation"></a>AWS CloudFormation</h2><p><a href="https://youtu.be/Omppm_YUG2g">CloudFormation</a> is a tool for creating, managing, configuring, and deploying cloud resources. Like any other AWS service, CloudFormation can be used via either the CLI or web-console.</p><p>This tool is particularly beneficial if you have to provision a set of cloud resources <strong>multiple times</strong>, at <strong>scale</strong>. You can do so by simply writing (YAML or JSON) scripts that you can easily edit and run numerous times.</p><ul><li>The (JSON or YAML) script file is also called the <strong>CloudFormation template</strong>.</li><li>In the script, we mention each resource’s necessary configuration that we want to provision and then use either the CLI commands or web-console to execute the scripts.</li><li>You can still individually manage AWS resources that are part of a CloudFormation stack.</li></ul><h3 id="What-is-a-CloudFormation-template"><a href="#What-is-a-CloudFormation-template" class="headerlink" title="What is a CloudFormation template?"></a>What is a CloudFormation template?</h3><p>It is a <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/gettingstarted.templatebasics.html">YAML or JSON script</a> that defines the collection of AWS resources that you want to create in just one command. Defining a particular resource means declaring the</p><ul><li>name of the resource,</li><li>type of resource, and</li><li>assigning the necessary properties.</li></ul><p>Of course, the properties of a resource vary from one <em>type</em> to another, for example, the properties of an IAM role will be different from an S3 bucket. Let’s see an example CloudFormation template below that is defining a VPC with a <code>10.0.0.0/16</code> block (i.e., a virtual network with 65,536 private IP addresses):</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">AWSTemplateFormatVersion:</span> <span class="number">2010-09-09</span></span><br><span class="line"><span class="attr">Description:</span> <span class="string">Udacity</span> <span class="bullet">-</span> <span class="string">This</span> <span class="string">template</span> <span class="string">deploys</span> <span class="string">a</span> <span class="string">VPC</span></span><br><span class="line"><span class="attr">Resources:</span></span><br><span class="line">  <span class="attr">myUdacityVPC:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">&#x27;AWS::EC2::VPC&#x27;</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">CidrBlock:</span> <span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line">      <span class="attr">EnableDnsHostnames:</span> <span class="string">&#x27;true&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>In simple words, a VPC is a virtual network defined by a range of IP addresses allocated to you. These IP addresses are by-default private to you, meaning no one will be able to accesss these IP addresses from the outside-world. You can associate any of these IP addresses to the resources, such as Database, server, load-balancer, cluster etc.</p></blockquote><p>The template above is defining the following:</p><ul><li>default template format, as <code>2010-09-09</code></li><li>name of the resource, as <code>myUdacityVPC</code></li><li>type of resource, as <code>&#39;AWS::EC2::VPC&#39;</code></li><li>Property fields, such as <code>CidrBlock</code>, and <code>EnableDnsHostnames</code></li></ul><p>Certainly, there could be many more property-fields that you can use if needed. And, as mentioned earlier, the properties of a resource vary from one <em>type</em> to another.</p><blockquote><p>Do not copy-paste the template shown above because a YAML file is indentation-sensitive. Instead, write it on your own, or download it from the bottom of this page.</p></blockquote><p>You can find a complete reference in the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">AWS resource and property types</a>. <em>(Do check out EC2, EKS, CodeBuild, and CodePipeline artifacts).</em></p><h3 id="What-is-a-stack"><a href="#What-is-a-stack" class="headerlink" title="What is a stack?"></a>What is a stack?</h3><p>When you run your CloudFormation template either using a CLI or the web-console, a group of resources gets created in the cloud. For example, the group of resources could comprise a VPC, one or more EC2 instances, S3 buckets, IAM roles, or any other AWS resource.</p><p>This collection of resources that get created using a single script, is considered a one-logical entity called <strong>a stack</strong>. It means you can create, update, or delete a stack in just a single command.</p><p>Reference: <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-whatis-concepts.html">AWS CloudFormation concepts</a></p>]]></content>
    
    
    <summary type="html">CloudFormation is a tool for creating, managing, configuring, and deploying cloud resources. Like any other AWS service, CloudFormation can be used via either the CLI or web-console.</summary>
    
    
    
    <category term="Server Deplovment" scheme="https://cyanky.github.io/categories/Server-Deplovment/"/>
    
    
    <category term="Server Deplovment" scheme="https://cyanky.github.io/tags/Server-Deplovment/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes</title>
    <link href="https://cyanky.github.io/posts/9acacb00/"/>
    <id>https://cyanky.github.io/posts/9acacb00/</id>
    <published>2022-07-02T14:36:32.000Z</published>
    <updated>2022-07-02T14:49:54.592Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Container-Scaling"><a href="#Container-Scaling" class="headerlink" title="Container Scaling"></a>Container Scaling</h3><ol><li><strong>Vertical scaling</strong> Increasing the host machine’s hardware resources on which the container is running is called <em>vertical scaling</em>. Earlier, we learned that a container has no resource constraints and can use as much of a given resource as the host’s kernel scheduler allows. This approach’s downside is that<ul><li>It is challenging to scale up-or-down as the demand changes automatically.</li><li>Larger host machines can be more expensive than smaller machines, so it is a loss if the machine is underutilized. Also, running an application in a single container alone doesn’t leverage the full power of containerization.</li></ul></li><li><strong>Horizontal scaling</strong> Running multiple instances of the same application across multiple machines is called <em>horizontal scaling</em>. It is effortless to run multiple containers based on the same image</li></ol><h3 id="Why-is-Kubernetes-required"><a href="#Why-is-Kubernetes-required" class="headerlink" title="Why is Kubernetes required?"></a>Why is Kubernetes required?</h3><p>The containers that you created were running locally on your machine. There are limitations to containerizing applications locally, such as:</p><ol><li><strong>Scaling</strong> - You cannot automatically scale up-or-down the resources (number of containers) or application usage requirements based on the incoming traffic.</li><li><strong>Updates</strong> - Assume you have manually scaled up your containers horizontally on multiple hosts. Now, develop a patch&#x2F;update in your application. It will be difficult for you to update the patch in each container manually.</li><li><strong>Elasticity</strong> - Your local computer&#x2F;on-premise servers may not suffice the hardware requirements for running too many containers parallelly.</li></ol><p>The solution to auto-scaling problems #1 and #2 above is to use the Kubernetes. The solution to problem #3 above is to use elastic (unlimited) resources on the cloud.</p><h3 id="What-is-Kubernetes"><a href="#What-is-Kubernetes" class="headerlink" title="What is Kubernetes?"></a>What is Kubernetes?</h3><p><a href="https://kubernetes.io/">Kubernetes</a> is one of the most popular orchestration system for containers developed by Google and open sourced in 2014. It can automate many of the manual operations of deployment and scaling of a containerized application. A few of the benefits of using Kubernetes (k8s) are:</p><ul><li>The ease of scaling the container instances up or down to meet varying demands (horizontal scaling).</li><li>It can balance loads, and perform health checks.</li><li>It helps in setting-up inter-container communication (networking).</li></ul><p>Kubernetes was born out of the lessons learned in the <a href="https://queue.acm.org/detail.cfm?id=2898444">Scaling containerized apps at Google</a>.</p><h3 id="Benefits-of-using-Kubernetes"><a href="#Benefits-of-using-Kubernetes" class="headerlink" title="Benefits of using Kubernetes"></a>Benefits of using Kubernetes</h3><p>A few more benefits of using Kubernetes are:</p><ul><li>High availability architecture</li><li>Auto-scaling</li><li>Rich Ecosystem</li><li>Service discovery</li><li>Container health management</li><li>Secrets and configuration management The downside of these features is the high complexity and learning curve of Kubernetes.</li></ul><h3 id="Key-Terms"><a href="#Key-Terms" class="headerlink" title="Key Terms"></a>Key Terms</h3><ul><li><em>Cluster</em>: A group of machines running Kubernetes</li><li><em>Master</em>: The system which controls a Kubernetes cluster. You will typically interact with the master when you communicate with a cluster. The master includes an api, scheduler, and management daemon.</li><li><em>Nodes</em>: The machines in a cluster. These can be virtual, physical, or a combination of both.</li><li><a href="https://kubernetes.io/docs/concepts/workloads/pods/"><em>Pods</em></a>: It is considered as the <em>smallest unit</em> in a cluster. It is a logical group of containers on a node that runs a particular module&#x2F;application. A pod consists of one or more containers, shared storage resources, and a unique IP address. Note that all the containers within a Pod share the namespaces and filesystem volumes. Pods are not persistent, and may be brought up and down by the master during scaling.</li></ul><h3 id="Kubernetes-Cluster-Architecture"><a href="#Kubernetes-Cluster-Architecture" class="headerlink" title="Kubernetes Cluster Architecture"></a>Kubernetes Cluster Architecture</h3><p>The core of Kubernetes is the cluster. A cluster comprises several node machines for running containerized applications and a master for managing the nodes. Each node is capable of running multiple <em>pods</em> (a group of containers). Therefore, each node has a container runtime, such as Docker, installed on it.</p><p>The diagram below shows a simplistic view of a Kubernetes cluster.</p><p><img src="https://video.udacity-data.com/topher/2019/September/5d71adc3_image2/image2.png" alt="Kubernetes clusters consist of a master system, nodes and pods"></p><p>Kubernetes clusters consist of a master system, nodes, pods, and services.</p><p>Note the following points about the Kubernetes architecture:</p><ol><li>Nodes are managed by the Master system. <strong>Each node in the cluster must have a container runtime, such as Docker.</strong></li><li>A given node can host multiple PODs.</li><li>The PODs (a logical group of containers) are running independent modules of an application. In the last lesson, it was a single container running a module.</li><li>The PODs are replicated across multiple nodes.</li></ol><p>You can view a detailed version of the cluster architecture <a href="https://kubernetes.io/docs/concepts/overview/components/">here</a>.</p><h3 id="Reliability"><a href="#Reliability" class="headerlink" title="Reliability"></a>Reliability</h3><p>In the cluster diagram shown above, each POD runs a specific module (App A, App B, App C…) of an application. Moreover, the PODs are not attached to a specific node (host). Instead, multiple nodes are hosting similar PODs. This architecture mitigates the chances of a single point of failure, and thus provides high availability. The master system brings a layer of abstraction for the external client&#x2F;application.</p><h3 id="Service-and-Volumes"><a href="#Service-and-Volumes" class="headerlink" title="Service and Volumes"></a>Service and Volumes</h3><p>All pods that are running the same application module share storage resources. Further, all the containers within a pod share the namespaces and filesystem volumes. Hence, in order to have a persistent way to store data, volumes can be attached to pods.</p><p>Whereas, in order to have a persistent way to communicate with ephemeral pods, a higher-level service abstraction is provided, called <em>Kubernetes Service</em>.</p><blockquote><p><em>Service</em>: An abstraction of a set of pods and interface for how to interact with the pods</p></blockquote><p><img src="https://video.udacity-data.com/topher/2019/September/5d71ad55_l2-deployment-2/l2-deployment-2.png" alt="Kubernetes pods with a connected service and volume"></p><p>Kubernetes pods with a connected service and attached volume</p>]]></content>
    
    
    <summary type="html">Kubernetes is one of the most popular orchestration system for containers developed by Google and open sourced in 2014. It can automate many of the manual operations of deployment and scaling of a containerized application.</summary>
    
    
    
    <category term="Server Deployment" scheme="https://cyanky.github.io/categories/Server-Deployment/"/>
    
    
    <category term="Server Deployment" scheme="https://cyanky.github.io/tags/Server-Deployment/"/>
    
  </entry>
  
  <entry>
    <title>AWS_Service_Part1</title>
    <link href="https://cyanky.github.io/posts/edffd6ed/"/>
    <id>https://cyanky.github.io/posts/edffd6ed/</id>
    <published>2022-07-01T13:30:16.000Z</published>
    <updated>2022-07-02T14:49:54.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="S3"><a href="#S3" class="headerlink" title="S3"></a>S3</h2><p>Amazon S3: Object Storage built to store and retrieve any amout of data from anywhere.</p><h3 id="1-Properties"><a href="#1-Properties" class="headerlink" title="1. Properties"></a>1. Properties</h3><p>There are several properties that you can set for S3 buckets, such as:</p><ul><li>Bucket Versioning - Allows you to keep multiple versions of an object in the same bucket.</li><li>Static website hosting - Mark if the bucket is used to host a website. S3 is a very cost-effective and cheap solution for serving up static web content.</li><li>Requester pays - Make the requester pays for requests and data transfer costs.</li><li>Server access logging - Log requests for access to your bucket.</li><li><strong>Permissions</strong></li></ul><p>It shows who has access to the S3 bucket, and who has access to the data within the bucket. In the example snapshots above, the bucket is public, meaning anyone can access it. Here, we can write an access policy (in JSON format) to provides access to the objects stored in the bucket.</p><h3 id="2-Metrics"><a href="#2-Metrics" class="headerlink" title="2. Metrics"></a>2. Metrics</h3><p>View the metrics for usage, request, and data transfer activity within your bucket, such as, total bucket size, total number of objects, and storage class analysis.</p><h3 id="3-Management"><a href="#3-Management" class="headerlink" title="3. Management"></a>3. Management</h3><p>It allows you to create life cycle rules to help manage your objects. It includes rules such as transitioning objects to another storage class, archiving them, or deleting them after a specified period of time.</p><h3 id="4-Access-points"><a href="#4-Access-points" class="headerlink" title="4. Access points"></a>4. Access points</h3><p>Here, you can create access endpoints for sharing the bucket at scale. Using an endpoint, you can perform all regular operations on the bucket.</p><h2 id="EC2-Elastic-Cloud-Compute"><a href="#EC2-Elastic-Cloud-Compute" class="headerlink" title="EC2: Elastic Cloud Compute"></a>EC2: Elastic Cloud Compute</h2><p>Elastic Cloud Compute or EC2 is a foundational piece of AWS’ cloud computing platform and is a service that provides servers for rent in the cloud.</p><h2 id="IAM"><a href="#IAM" class="headerlink" title="IAM"></a>IAM</h2><h3 id="Identity-amp-Access-Management"><a href="#Identity-amp-Access-Management" class="headerlink" title="Identity &amp; Access Management"></a>Identity &amp; Access Management</h3><p>IAM is an AWS service that allows us to configure who can access our AWS account, AWS services, or even applications running in our account. IAM is a global service and is automatically available across <strong>all AWS regions</strong>.</p><blockquote><p>AWS IAM service securely controls access to AWS resources by authenticating and authorizing (giving granular permissions) the individual users, applications, or services.</p></blockquote><p>Let’s learn about key IAM terms.</p><h4 id="1-IAM-User"><a href="#1-IAM-User" class="headerlink" title="1. IAM User"></a>1. IAM User</h4><p>A user is a unique identifier generated by the IAM service and recognized by all AWS services to grant access to AWS resources. A user can be a person, system, or application that requires access to AWS services. You can generate login credentials and access keys for any user in your account. Roles and policies control the scope (permissions) of a user’s access to AWS resources in your account.</p><h4 id="2-IAM-Group"><a href="#2-IAM-Group" class="headerlink" title="2. IAM Group"></a>2. IAM Group</h4><p>A group collects IAM users with the same level of permissions to access AWS resources. You can attach or detach permissions to a group using access control policies. A group makes it easier to manage IAM users with the same level of permissions.</p><h4 id="3-IAM-Role"><a href="#3-IAM-Role" class="headerlink" title="3. IAM Role"></a>3. IAM Role</h4><p>A role is simply a set of policies (permissions) to access AWS services. You can assign a role either to an IAM user or an AWS service such as EC2. Creating and storing roles helps to delegate access with defined permissions without sharing long-term access keys.</p><blockquote><h4 id="Difference-between-an-IAM-role-and-an-IAM-user"><a href="#Difference-between-an-IAM-role-and-an-IAM-user" class="headerlink" title="Difference between an IAM role and an IAM user"></a>Difference between an IAM role and an IAM user</h4><p>An IAM user has permanent credentials that can be used to interact with AWS services directly. In contrast, an IAM role does not have any credentials; hence it cannot make direct requests to AWS services. IAM roles are assumed by authorized entities, such as IAM users, applications, or other AWS services.</p></blockquote><h4 id="4-IAM-Policy"><a href="#4-IAM-Policy" class="headerlink" title="4. IAM Policy"></a>4. IAM Policy</h4><p>An access control policy is a JSON file that defines the resource to grant access, level of access, and allowed actions. In simple words, a policy defines the permissions to access a resource. You can attach a policy to multiple users, groups, or roles to assign permissions to AWS resources.</p><p>AWS offers predefined policies that are managed by AWS. You can even create, save, and attach custom policies, as shown below</p><p><img src="https://video.udacity-data.com/topher/2021/January/5ff5b2d0_screenshot-2021-01-06-at-6.08.07-pm/screenshot-2021-01-06-at-6.08.07-pm.png" alt="Screenshot showing creating a custom policy in the AWS web console"></p><p>Create a custom policy using either a visual or a JSON editor</p><p>See a sample IAM policy that allows full EC2 access within a specific AWS region. Notice the fields that are used to define the policy: <code>Action</code>, <code>Resource</code>, <code>Effect</code>, and <code>Condition</code>.</p><blockquote><p>EC2 is one the AWS serv</p></blockquote>]]></content>
    
    
    <summary type="html">S3, EC3, IAM</summary>
    
    
    
    <category term="Server Deployment" scheme="https://cyanky.github.io/categories/Server-Deployment/"/>
    
    
    <category term="Server Deployment" scheme="https://cyanky.github.io/tags/Server-Deployment/"/>
    
  </entry>
  
  <entry>
    <title>Cloud Computing</title>
    <link href="https://cyanky.github.io/posts/2511a43a/"/>
    <id>https://cyanky.github.io/posts/2511a43a/</id>
    <published>2022-06-29T13:04:49.000Z</published>
    <updated>2022-06-29T13:06:53.717Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cloud-Computing"><a href="#Cloud-Computing" class="headerlink" title="Cloud Computing"></a>Cloud Computing</h2><p>Cloud Computing is the delivery of IT resources over the Internet. The cloud is like a virtual data center accessible via the Internet that allows you to manage:</p><ul><li>Storage services like databases</li><li>Servers, compute power, networking</li><li>Analytics, artificial intelligence, augmented reality</li><li>Security services for data and applications</li></ul><h2 id="Characteristics-of-Cloud-Computing"><a href="#Characteristics-of-Cloud-Computing" class="headerlink" title="Characteristics of Cloud Computing"></a>Characteristics of Cloud Computing</h2><ul><li>Pay as you go - You pay only for what you use and only when your code runs.</li><li>Autoscaling - The number of active servers can grow or shrink based on demand.</li><li>Serverless - Allows you to write and deploy code without having to worry about the underlying infrastructure.</li></ul><h2 id="Benefits-of-using-Cloud-Computing"><a href="#Benefits-of-using-Cloud-Computing" class="headerlink" title="Benefits of using Cloud Computing"></a>Benefits of using Cloud Computing</h2><p>There are several benefits to the cloud.</p><ul><li>Stop guessing about capacity.</li><li>Avoid huge capital investments up front.</li><li>Pay for only what you use.</li><li>Scale globally in minutes.</li><li>Deliver faster.</li></ul><h2 id="Cloud-Deployment-Models"><a href="#Cloud-Deployment-Models" class="headerlink" title="Cloud Deployment Models"></a>Cloud Deployment Models</h2><ol><li><strong>Public Cloud:</strong> A public cloud makes resources available over the Internet to the general public.</li><li><strong>Private Cloud:</strong> A private cloud is a proprietary network that supplies services to a limited number of people.</li><li><strong>Hybrid Cloud:</strong> A hybrid model contains a combination of both a public and a private cloud. The hybrid model is a growing trend in the industry for those organizations that have been slow to adopt the cloud due to being in a heavily regulated industry. The hybrid model gives organizations the flexibility to slowly migrate to the cloud.</li></ol><h2 id="Types-of-Cloud-Computing"><a href="#Types-of-Cloud-Computing" class="headerlink" title="Types of Cloud Computing"></a>Types of Cloud Computing</h2><ol><li><strong>Infrastructure-as-a-Service (IaaS):</strong> The provider supplies virtual server instances, storage, and mechanisms for you to manage servers.</li><li><strong>Platform-as-a-Service (PaaS):</strong> A platform of development tools hosted on a provider’s infrastructure.</li><li><strong>Software-as-a-Service (SaaS):</strong> A software application that runs over the Internet and is managed by the service provider.</li></ol><h2 id="Amazon-Web-Services-AWS-is-a-Market-Leader"><a href="#Amazon-Web-Services-AWS-is-a-Market-Leader" class="headerlink" title="Amazon Web Services (AWS) is a Market Leader"></a>Amazon Web Services (AWS) is a Market Leader</h2><p>There are several popular cloud platforms like AWS, Azure, and GCP; however, Amazon Web Services (AWS) is one of the popular public cloud infrastructures. AWS routinely adds new services and invests billions of dollars in the overall platform and infrastructure.</p><h2 id="Cloud-Based-Products"><a href="#Cloud-Based-Products" class="headerlink" title="Cloud-Based Products"></a>Cloud-Based Products</h2><p>Amazon Web Services offers a broad set of global cloud-based products.</p><ul><li>Analytics<ul><li>Quick Sight</li><li>Athena</li><li>Redshift</li></ul></li><li>Application integration<ul><li>Simple Queue Service (SQS)</li><li>Simple Notification Service (SNS)</li></ul></li><li>Cost management<ul><li>AWS Budgets</li></ul></li><li>Compute services<ul><li>Elastic Cloud Compute (EC2)</li><li>Lambda</li><li>Elastic Beanstalk</li></ul></li><li>Database management services<ul><li>MySQL</li><li>Oracle</li><li>SQLServer</li><li>DynamoDB</li><li>MongoDB</li></ul></li><li>Developer tools<ul><li>Cloud 9</li><li>Code Pipeline</li></ul></li><li>Security services<ul><li>Key Management Service (KMS)</li><li>Shield</li><li>Identity and Access Management (IAM)</li></ul></li><li>Additional Services<ul><li>Blockchain</li><li>Machine Learning</li><li>Computer Vision</li><li>Internet of Things (IoT)</li><li>AR&#x2F;VR</li></ul></li></ul>]]></content>
    
    
    <summary type="html">Cloud Computing is the delivery of IT resources over the Internet.</summary>
    
    
    
    <category term="Server Deplovment" scheme="https://cyanky.github.io/categories/Server-Deplovment/"/>
    
    
    <category term="Server Deplovment" scheme="https://cyanky.github.io/tags/Server-Deplovment/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="https://cyanky.github.io/posts/f5f9fa9b/"/>
    <id>https://cyanky.github.io/posts/f5f9fa9b/</id>
    <published>2022-06-27T13:33:23.000Z</published>
    <updated>2022-06-27T13:37:20.918Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Glossary"><a href="#Glossary" class="headerlink" title="Glossary"></a>Glossary</h2><ol><li><p><strong>Docker Engine</strong><br><em>Docker Engine</em> is an application that consists of a <em>daemon</em>, an <em>API</em>, and a <em>client</em>:</p><ul><li><p>The Docker <em>daemon</em> is a server that manages the images, containers, networks, and volumes.</p></li><li><p>The Docker <em>client</em> is the user interface for Docker. The client is a CLI, so most of the work you do with Docker will take place at the command line.</p></li></ul><p>The client communicates with the daemon through the command line API as shown in the image below. You will be using the Docker Engine to create and run containers, so if you have not installed Docker using the links above, please be sure to do so.</p></li></ol><p><img src="https://video.udacity-data.com/topher/2019/July/5d407c96_image1/image1.png" alt="Docker engine consists of the Docker Daemon, Docker API, and Docker Client"></p><p>Docker engine consists of the Docker Daemon, Docker API, and Docker Client</p><ol start="2"><li><strong>Docker Image</strong><br>A Docker <em>image</em> is the set of instructions for creating a container. The image typically includes a file system and the parameters that will be used for the container.</li></ol><blockquote><p>Images are comprised of multiple layers. Each layer contains specific software.</p></blockquote><p>You can create a custom Docker image for a specific application. Start with a standardized [*parent image*](<a href="https://docs.docker.com/glossary/?term=parent">https://docs.docker.com/glossary/?term=parent</a> image) as the base layer. The parent image often contains the file system of a particular operating system, such as Ubuntu 18.04. Then add an additional layer to the image, on top of the base layer. You can add your application files to this additional layer. You can even add multiple additional layers, and distribute your application files across different layers, as appropriate for your needs.</p><p>You will be able to see this structure more clearly when you create Dockerfiles in the coming classroom concept.</p><ol start="3"><li><p><strong>Docker Container</strong><br>You have already been introduced to containers, and a Docker container is just the Docker-specific implementation of the concept. In practice, Docker containers are created from Docker images - a container is a runnable instance of an image. Note that since the image is a set of instructions for creating a container, multiple containers can be created from the same image.</p></li><li><p><strong>Docker Registry</strong><br>Docker images can be stored and distributed using a <a href="https://docs.docker.com/registry/">Docker registry</a>. In the next classroom concept, you will download and run an image from <a href="https://hub.docker.com/">DockerHub</a>, which is a free registry with many images you can use.</p></li></ol>]]></content>
    
    
    <summary type="html">Docker is the most popular open-sourced container runtime tool that helps to build, test, and run containers. It is both a container system and a company.</summary>
    
    
    
    <category term="Server Deployment" scheme="https://cyanky.github.io/categories/Server-Deployment/"/>
    
    
    <category term="Server Deployment" scheme="https://cyanky.github.io/tags/Server-Deployment/"/>
    
  </entry>
  
  <entry>
    <title>Containers</title>
    <link href="https://cyanky.github.io/posts/def1a7db/"/>
    <id>https://cyanky.github.io/posts/def1a7db/</id>
    <published>2022-06-26T06:32:00.000Z</published>
    <updated>2022-06-26T06:43:02.741Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What-is-a-Container"><a href="#What-is-a-Container" class="headerlink" title="What is a Container?"></a>What is a Container?</h3><p><a href="https://en.wikipedia.org/wiki/OS-level_virtualization">OS level virtualization</a> allows us to run <em>multiple isolated processes</em> in parallel. A container is an isolated process that consists of the following items, all bundled into one package:</p><ul><li>the application code,</li><li>the required dependencies (e.g. libraries, utilities, configuration files), and</li><li>the necessary runtime environment to run the application.</li></ul><p>Each container is an independent component that can run on its own and be moved from environment to environment.</p><h4 id="Benefit-of-Containers"><a href="#Benefit-of-Containers" class="headerlink" title="Benefit of Containers"></a>Benefit of Containers</h4><ul><li>Containers make it easier for developers to create, deploy, and run applications on different hardware and platforms, quickly and easily.</li><li>Containers share a single kernel and share application libraries.</li><li>Containers cause a lower system overhead as compared to Virtual Machines.</li></ul><h3 id="How-to-create-containers"><a href="#How-to-create-containers" class="headerlink" title="How to create containers?"></a>How to create containers?</h3><p>Several platforms (called Container runtime&#x2F;engines) allow us to create containers. Some common Container runtime&#x2F;engines are:</p><ul><li><a href="https://www.docker.com/products/container-runtime">Docker</a> - A standardized packaging format for diverse applications</li><li><a href="https://cri-o.io/">CRI-O</a> - Lightweight container runtime for Kubernetes</li><li><a href="https://openvz.org/">OpenVZ</a> - Open source container-based virtualization for Linux</li><li><a href="https://containerd.io/">Containerd</a> - Container runtime with an emphasis on simplicity, robustness, and portability</li><li><a href="https://coreos.com/rkt/">Rkt</a> - An application container engine developed for modern production cloud-native environments</li><li><a href="https://linuxcontainers.org/">LXC and LXD</a> - A distro and vendor-neutral environment for the development of Linux container technologies</li></ul><p>Docker is the most popular one and hence, in this course, you will learn to create containers using the Docker engine.</p><h3 id="Containers-vs-VM"><a href="#Containers-vs-VM" class="headerlink" title="Containers vs VM"></a>Containers vs VM</h3><h4 id="What-is-a-VM"><a href="#What-is-a-VM" class="headerlink" title="What is a VM?"></a>What is a VM?</h4><p>A VM is like a complete computer, with its own copy of an operating system and <em>virtual</em> hardware. Just as with containers, a single physical machine (the host machine) can run many virtual machines to scale the number of isolated applications. While virtual machines work well for scaling applications, since they virtualize an entire machine, they can be resource-intensive. This is where containers can be an improvement.</p><ul><li><p><strong>How multiple VMs are managed on a host machine?</strong><br>Each VM has a complete OS, and multiple VMs can run on the same host. The host operating system runs the VMs using a <strong>hypervisor</strong>, which is special software that creates and manages the VMs. The hypervisor maintains the isolation of the VMs with each other.</p></li><li><p><strong>How multiple containers are managed on a host machine?</strong><br>Containers bundle together an application with its dependencies. Unlike VMs, containers do not have a separate OS or virtualized hardware. They share a single operating system kernel. In practice, the containers are managed by a <strong>container manager</strong>, which serves a role analogous to the hypervisor in a VM scenario.</p></li></ul><h4 id="How-to-create-VMs"><a href="#How-to-create-VMs" class="headerlink" title="How to create VMs?"></a>How to create VMs?</h4><p>If you want to create a VM (a complete computer) locally, you can use either of the following software (called Hypervisors):</p><ul><li><a href="https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/quick-create-virtual-machine">Microsoft Hyper-V</a></li><li><a href="https://www.virtualbox.org/manual/ch01.html">Oracle VM VirtualBox</a></li><li><a href="https://www.vmware.com/">VMWare</a></li><li><a href="https://www.parallels.com/">Parallels Desktop</a></li></ul><p>We will not get into the details and types of hypervisors because it is beyond this course’s scope. Also, most of the cloud service providers offer you to create VM on their infrastructure, such as:</p><ul><li><a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts.html">AWS EC2</a></li><li><a href="https://cloud.google.com/compute/docs/instances">GCP Compute Engines</a></li><li><a href="https://azure.microsoft.com/en-in/services/virtual-machines/">Azure Virtual Machines</a></li></ul><p>Creating VMs is also beyond the current course’s scope, but it is important to understand the relative difference between a container and a VM.</p><blockquote><p>Just as with containers, a single physical machine (the host machine) can run many virtual machines to scale the number of isolated applications.</p></blockquote><h4 id="Problem-with-VMs"><a href="#Problem-with-VMs" class="headerlink" title="Problem with VMs"></a>Problem with VMs</h4><p>Earlier, we learned that a VM is like a complete computer, with its own copy of an operating system and virtual hardware. While virtual machines work well for scaling applications, they can be resource-intensive since they virtualize an entire machine. This is where containers can be an improvement when you want to scale up your application.</p><h4 id="Why-containers-are-light-weight"><a href="#Why-containers-are-light-weight" class="headerlink" title="Why containers are light-weight?"></a>Why containers are light-weight?</h4><p>Containers run on the shared host OS instead of virtualizing an entire OS and hardware. Containers share the operating system kernel and partitioning the operating system’s resources. There are no virtual operating systems or virtual hardware in the container model, which reduces the total resources needed to run them.</p><h4 id="Summary-Benefits-of-using-Containers-versus-VMs"><a href="#Summary-Benefits-of-using-Containers-versus-VMs" class="headerlink" title="Summary: Benefits of using Containers versus VMs"></a>Summary: Benefits of using Containers versus VMs</h4><p>There are several benefits of using Containers over VMs:</p><ul><li><p><strong>Size:</strong> Containers are much smaller than Virtual Machines (VM) and run as isolated processes versus virtualized hardware. VMs can be in GBs while containers are in MBs.</p></li><li><p><strong>Speed:</strong> Virtual Machines can be slow to boot and take minutes to launch. A container can spawn much more quickly typically in seconds.</p></li><li><p><strong>Composability:</strong> Containers are designed to be programmatically built and are defined as source code. Virtual Machines are often replicas of a conventional computer system.</p></li></ul>]]></content>
    
    
    <summary type="html">Containers are a light-weight option to bundle an application with its environment.</summary>
    
    
    
    <category term="Server Deployment" scheme="https://cyanky.github.io/categories/Server-Deployment/"/>
    
    <category term="Python" scheme="https://cyanky.github.io/categories/Server-Deployment/Python/"/>
    
    
    <category term="Server Deployment" scheme="https://cyanky.github.io/tags/Server-Deployment/"/>
    
    <category term="Python" scheme="https://cyanky.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Test-Anatomy of Java</title>
    <link href="https://cyanky.github.io/posts/f5f5a5e6/"/>
    <id>https://cyanky.github.io/posts/f5f5a5e6/</id>
    <published>2022-05-29T10:20:47.000Z</published>
    <updated>2022-05-30T07:07:44.761Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Function"><a href="#Function" class="headerlink" title="Function:"></a><strong>Function</strong>:</h1><p>the smallest building block in java programs, to perform a task ( the button on the  remote control of TV )  </p><h1 id="the-parts-of-a-function"><a href="#the-parts-of-a-function" class="headerlink" title="the parts of a function"></a>the parts of a function</h1><ol><li><p><strong>Return Type</strong> : <strong>void</strong>&#x2F;value&#x2F;…  </p></li><li><p><strong>the name of the function</strong>: send email…( clearly identifies the purpose of the function)  </p></li><li><p><em>parenthese</em> <strong>(parameters)</strong>: who’s the receiver what is the subject&#x2F;content of the email   </p></li><li><p><em>a pair of curly braces</em> <strong>{</strong> <em>&#x2F;&#x2F;put the left brace on the same line where we define our function in Java</em><br>… the actual Java code <strong>method in Java</strong> (the function that is part of a class)<br><strong>}</strong>  </p></li><li><p><strong>main function</strong>: every Java program need at least one function called this, is the entry point to our programs whenever we execute a Java  program.  </p></li><li><p><strong>class</strong>: a <strong>container</strong> for one or more related functions. Used to organize our codes. Functions in Java don’t exixt on their own (but can exist in Python), they belong to a class.  </p></li><li><p><strong>main class</strong>: every Java program need at least one class called this that contain the main function<br><em><strong>class(key word) + proper descriptive name {</strong></em>  </p></li><li><p><strong>function</strong>: exists outside of a class<br><strong>method</strong>: when a function belongs to a class we refer to it as a method of that class  </p></li><li><p><strong>access modifier</strong>: <em>public&#x2F;private&#x2F;…</em> all the classes and functions should have this. A special keyword determine whether other classes and methods in this program can access to these classes and methods.  </p></li><li><p><strong>PascalNamingConvention</strong>–&gt; Classes<br><strong>camelNamingConvention</strong>–&gt; Methods</p></li></ol><pre><code>public class Main &#123;        public void main() &#123;        ...        &#125;    &#125;  </code></pre>]]></content>
    
    
    <summary type="html">The definition of &#39;Function&#39; in JAVA.</summary>
    
    
    
    <category term="Web Develope" scheme="https://cyanky.github.io/categories/Web-Develope/"/>
    
    <category term="Backend" scheme="https://cyanky.github.io/categories/Web-Develope/Backend/"/>
    
    <category term="JAVA" scheme="https://cyanky.github.io/categories/Web-Develope/Backend/JAVA/"/>
    
    
    <category term="JAVA" scheme="https://cyanky.github.io/tags/JAVA/"/>
    
  </entry>
  
</feed>
