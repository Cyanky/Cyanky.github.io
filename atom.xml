<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XIE Jingchen</title>
  
  <subtitle>Welcome to my first nest :)</subtitle>
  <link href="https://cyanky.github.io/atom.xml" rel="self"/>
  
  <link href="https://cyanky.github.io/"/>
  <updated>2022-06-27T13:36:49.959Z</updated>
  <id>https://cyanky.github.io/</id>
  
  <author>
    <name>XIE Jingchen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker</title>
    <link href="https://cyanky.github.io/posts/f5f9fa9b/"/>
    <id>https://cyanky.github.io/posts/f5f9fa9b/</id>
    <published>2022-06-27T13:33:23.000Z</published>
    <updated>2022-06-27T13:36:49.959Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Glossary"><a href="#Glossary" class="headerlink" title="Glossary"></a>Glossary</h2><ol><li><p><strong>Docker Engine</strong><br><em>Docker Engine</em> is an application that consists of a <em>daemon</em>, an <em>API</em>, and a <em>client</em>:</p><ul><li><p>The Docker <em>daemon</em> is a server that manages the images, containers, networks, and volumes.</p></li><li><p>The Docker <em>client</em> is the user interface for Docker. The client is a CLI, so most of the work you do with Docker will take place at the command line.</p></li></ul><p>The client communicates with the daemon through the command line API as shown in the image below. You will be using the Docker Engine to create and run containers, so if you have not installed Docker using the links above, please be sure to do so.</p></li></ol><p><img src="https://video.udacity-data.com/topher/2019/July/5d407c96_image1/image1.png" alt="Docker engine consists of the Docker Daemon, Docker API, and Docker Client"></p><p>Docker engine consists of the Docker Daemon, Docker API, and Docker Client</p><ol start="2"><li><strong>Docker Image</strong><br>A Docker <em>image</em> is the set of instructions for creating a container. The image typically includes a file system and the parameters that will be used for the container.</li></ol><blockquote><p>Images are comprised of multiple layers. Each layer contains specific software.</p></blockquote><p>You can create a custom Docker image for a specific application. Start with a standardized [*parent image*](<a href="https://docs.docker.com/glossary/?term=parent">https://docs.docker.com/glossary/?term=parent</a> image) as the base layer. The parent image often contains the file system of a particular operating system, such as Ubuntu 18.04. Then add an additional layer to the image, on top of the base layer. You can add your application files to this additional layer. You can even add multiple additional layers, and distribute your application files across different layers, as appropriate for your needs.</p><p>You will be able to see this structure more clearly when you create Dockerfiles in the coming classroom concept.</p><ol start="3"><li><p><strong>Docker Container</strong><br>You have already been introduced to containers, and a Docker container is just the Docker-specific implementation of the concept. In practice, Docker containers are created from Docker images - a container is a runnable instance of an image. Note that since the image is a set of instructions for creating a container, multiple containers can be created from the same image.</p></li><li><p><strong>Docker Registry</strong><br>Docker images can be stored and distributed using a <a href="https://docs.docker.com/registry/">Docker registry</a>. In the next classroom concept, you will download and run an image from <a href="https://hub.docker.com/">DockerHub</a>, which is a free registry with many images you can use.</p></li></ol>]]></content>
    
    
    <summary type="html">Docker is the most popular open-sourced container runtime tool that helps to build, test, and run containers. It is both a container system and a company.</summary>
    
    
    
    <category term="Server Deployment" scheme="https://cyanky.github.io/categories/Server-Deployment/"/>
    
    
    <category term="Server Deployment" scheme="https://cyanky.github.io/tags/Server-Deployment/"/>
    
  </entry>
  
  <entry>
    <title>Containers</title>
    <link href="https://cyanky.github.io/posts/def1a7db/"/>
    <id>https://cyanky.github.io/posts/def1a7db/</id>
    <published>2022-06-26T06:32:00.000Z</published>
    <updated>2022-06-26T06:43:02.741Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What-is-a-Container"><a href="#What-is-a-Container" class="headerlink" title="What is a Container?"></a>What is a Container?</h3><p><a href="https://en.wikipedia.org/wiki/OS-level_virtualization">OS level virtualization</a> allows us to run <em>multiple isolated processes</em> in parallel. A container is an isolated process that consists of the following items, all bundled into one package:</p><ul><li>the application code,</li><li>the required dependencies (e.g. libraries, utilities, configuration files), and</li><li>the necessary runtime environment to run the application.</li></ul><p>Each container is an independent component that can run on its own and be moved from environment to environment.</p><h4 id="Benefit-of-Containers"><a href="#Benefit-of-Containers" class="headerlink" title="Benefit of Containers"></a>Benefit of Containers</h4><ul><li>Containers make it easier for developers to create, deploy, and run applications on different hardware and platforms, quickly and easily.</li><li>Containers share a single kernel and share application libraries.</li><li>Containers cause a lower system overhead as compared to Virtual Machines.</li></ul><h3 id="How-to-create-containers"><a href="#How-to-create-containers" class="headerlink" title="How to create containers?"></a>How to create containers?</h3><p>Several platforms (called Container runtime&#x2F;engines) allow us to create containers. Some common Container runtime&#x2F;engines are:</p><ul><li><a href="https://www.docker.com/products/container-runtime">Docker</a> - A standardized packaging format for diverse applications</li><li><a href="https://cri-o.io/">CRI-O</a> - Lightweight container runtime for Kubernetes</li><li><a href="https://openvz.org/">OpenVZ</a> - Open source container-based virtualization for Linux</li><li><a href="https://containerd.io/">Containerd</a> - Container runtime with an emphasis on simplicity, robustness, and portability</li><li><a href="https://coreos.com/rkt/">Rkt</a> - An application container engine developed for modern production cloud-native environments</li><li><a href="https://linuxcontainers.org/">LXC and LXD</a> - A distro and vendor-neutral environment for the development of Linux container technologies</li></ul><p>Docker is the most popular one and hence, in this course, you will learn to create containers using the Docker engine.</p><h3 id="Containers-vs-VM"><a href="#Containers-vs-VM" class="headerlink" title="Containers vs VM"></a>Containers vs VM</h3><h4 id="What-is-a-VM"><a href="#What-is-a-VM" class="headerlink" title="What is a VM?"></a>What is a VM?</h4><p>A VM is like a complete computer, with its own copy of an operating system and <em>virtual</em> hardware. Just as with containers, a single physical machine (the host machine) can run many virtual machines to scale the number of isolated applications. While virtual machines work well for scaling applications, since they virtualize an entire machine, they can be resource-intensive. This is where containers can be an improvement.</p><ul><li><p><strong>How multiple VMs are managed on a host machine?</strong><br>Each VM has a complete OS, and multiple VMs can run on the same host. The host operating system runs the VMs using a <strong>hypervisor</strong>, which is special software that creates and manages the VMs. The hypervisor maintains the isolation of the VMs with each other.</p></li><li><p><strong>How multiple containers are managed on a host machine?</strong><br>Containers bundle together an application with its dependencies. Unlike VMs, containers do not have a separate OS or virtualized hardware. They share a single operating system kernel. In practice, the containers are managed by a <strong>container manager</strong>, which serves a role analogous to the hypervisor in a VM scenario.</p></li></ul><h4 id="How-to-create-VMs"><a href="#How-to-create-VMs" class="headerlink" title="How to create VMs?"></a>How to create VMs?</h4><p>If you want to create a VM (a complete computer) locally, you can use either of the following software (called Hypervisors):</p><ul><li><a href="https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/quick-create-virtual-machine">Microsoft Hyper-V</a></li><li><a href="https://www.virtualbox.org/manual/ch01.html">Oracle VM VirtualBox</a></li><li><a href="https://www.vmware.com/">VMWare</a></li><li><a href="https://www.parallels.com/">Parallels Desktop</a></li></ul><p>We will not get into the details and types of hypervisors because it is beyond this course’s scope. Also, most of the cloud service providers offer you to create VM on their infrastructure, such as:</p><ul><li><a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts.html">AWS EC2</a></li><li><a href="https://cloud.google.com/compute/docs/instances">GCP Compute Engines</a></li><li><a href="https://azure.microsoft.com/en-in/services/virtual-machines/">Azure Virtual Machines</a></li></ul><p>Creating VMs is also beyond the current course’s scope, but it is important to understand the relative difference between a container and a VM.</p><blockquote><p>Just as with containers, a single physical machine (the host machine) can run many virtual machines to scale the number of isolated applications.</p></blockquote><h4 id="Problem-with-VMs"><a href="#Problem-with-VMs" class="headerlink" title="Problem with VMs"></a>Problem with VMs</h4><p>Earlier, we learned that a VM is like a complete computer, with its own copy of an operating system and virtual hardware. While virtual machines work well for scaling applications, they can be resource-intensive since they virtualize an entire machine. This is where containers can be an improvement when you want to scale up your application.</p><h4 id="Why-containers-are-light-weight"><a href="#Why-containers-are-light-weight" class="headerlink" title="Why containers are light-weight?"></a>Why containers are light-weight?</h4><p>Containers run on the shared host OS instead of virtualizing an entire OS and hardware. Containers share the operating system kernel and partitioning the operating system’s resources. There are no virtual operating systems or virtual hardware in the container model, which reduces the total resources needed to run them.</p><h4 id="Summary-Benefits-of-using-Containers-versus-VMs"><a href="#Summary-Benefits-of-using-Containers-versus-VMs" class="headerlink" title="Summary: Benefits of using Containers versus VMs"></a>Summary: Benefits of using Containers versus VMs</h4><p>There are several benefits of using Containers over VMs:</p><ul><li><p><strong>Size:</strong> Containers are much smaller than Virtual Machines (VM) and run as isolated processes versus virtualized hardware. VMs can be in GBs while containers are in MBs.</p></li><li><p><strong>Speed:</strong> Virtual Machines can be slow to boot and take minutes to launch. A container can spawn much more quickly typically in seconds.</p></li><li><p><strong>Composability:</strong> Containers are designed to be programmatically built and are defined as source code. Virtual Machines are often replicas of a conventional computer system.</p></li></ul>]]></content>
    
    
    <summary type="html">Containers are a light-weight option to bundle an application with its environment.</summary>
    
    
    
    <category term="Server Deployment" scheme="https://cyanky.github.io/categories/Server-Deployment/"/>
    
    <category term="Python" scheme="https://cyanky.github.io/categories/Server-Deployment/Python/"/>
    
    
    <category term="Server Deployment" scheme="https://cyanky.github.io/tags/Server-Deployment/"/>
    
    <category term="Python" scheme="https://cyanky.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Test-Anatomy of Java</title>
    <link href="https://cyanky.github.io/posts/f5f5a5e6/"/>
    <id>https://cyanky.github.io/posts/f5f5a5e6/</id>
    <published>2022-05-29T10:20:47.000Z</published>
    <updated>2022-05-30T07:07:44.761Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Function"><a href="#Function" class="headerlink" title="Function:"></a><strong>Function</strong>:</h1><p>the smallest building block in java programs, to perform a task ( the button on the  remote control of TV )  </p><h1 id="the-parts-of-a-function"><a href="#the-parts-of-a-function" class="headerlink" title="the parts of a function"></a>the parts of a function</h1><ol><li><p><strong>Return Type</strong> : <strong>void</strong>&#x2F;value&#x2F;…  </p></li><li><p><strong>the name of the function</strong>: send email…( clearly identifies the purpose of the function)  </p></li><li><p><em>parenthese</em> <strong>(parameters)</strong>: who’s the receiver what is the subject&#x2F;content of the email   </p></li><li><p><em>a pair of curly braces</em> <strong>{</strong> <em>&#x2F;&#x2F;put the left brace on the same line where we define our function in Java</em><br>… the actual Java code <strong>method in Java</strong> (the function that is part of a class)<br><strong>}</strong>  </p></li><li><p><strong>main function</strong>: every Java program need at least one function called this, is the entry point to our programs whenever we execute a Java  program.  </p></li><li><p><strong>class</strong>: a <strong>container</strong> for one or more related functions. Used to organize our codes. Functions in Java don’t exixt on their own (but can exist in Python), they belong to a class.  </p></li><li><p><strong>main class</strong>: every Java program need at least one class called this that contain the main function<br><em><strong>class(key word) + proper descriptive name {</strong></em>  </p></li><li><p><strong>function</strong>: exists outside of a class<br><strong>method</strong>: when a function belongs to a class we refer to it as a method of that class  </p></li><li><p><strong>access modifier</strong>: <em>public&#x2F;private&#x2F;…</em> all the classes and functions should have this. A special keyword determine whether other classes and methods in this program can access to these classes and methods.  </p></li><li><p><strong>PascalNamingConvention</strong>–&gt; Classes<br><strong>camelNamingConvention</strong>–&gt; Methods</p></li></ol><pre><code>public class Main &#123;        public void main() &#123;        ...        &#125;    &#125;  </code></pre>]]></content>
    
    
    <summary type="html">The definition of &#39;Function&#39; in JAVA.</summary>
    
    
    
    <category term="Web Develope" scheme="https://cyanky.github.io/categories/Web-Develope/"/>
    
    <category term="Backend" scheme="https://cyanky.github.io/categories/Web-Develope/Backend/"/>
    
    <category term="JAVA" scheme="https://cyanky.github.io/categories/Web-Develope/Backend/JAVA/"/>
    
    
    <category term="JAVA" scheme="https://cyanky.github.io/tags/JAVA/"/>
    
  </entry>
  
</feed>
