[{"title":"Containers","url":"/posts/def1a7db/","content":"<h3 id=\"What-is-a-Container\"><a href=\"#What-is-a-Container\" class=\"headerlink\" title=\"What is a Container?\"></a>What is a Container?</h3><p><a href=\"https://en.wikipedia.org/wiki/OS-level_virtualization\">OS level virtualization</a> allows us to run <em>multiple isolated processes</em> in parallel. A container is an isolated process that consists of the following items, all bundled into one package:</p>\n<ul>\n<li>the application code,</li>\n<li>the required dependencies (e.g. libraries, utilities, configuration files), and</li>\n<li>the necessary runtime environment to run the application.</li>\n</ul>\n<p>Each container is an independent component that can run on its own and be moved from environment to environment.</p>\n<h4 id=\"Benefit-of-Containers\"><a href=\"#Benefit-of-Containers\" class=\"headerlink\" title=\"Benefit of Containers\"></a>Benefit of Containers</h4><ul>\n<li>Containers make it easier for developers to create, deploy, and run applications on different hardware and platforms, quickly and easily.</li>\n<li>Containers share a single kernel and share application libraries.</li>\n<li>Containers cause a lower system overhead as compared to Virtual Machines.</li>\n</ul>\n<h3 id=\"How-to-create-containers\"><a href=\"#How-to-create-containers\" class=\"headerlink\" title=\"How to create containers?\"></a>How to create containers?</h3><p>Several platforms (called Container runtime&#x2F;engines) allow us to create containers. Some common Container runtime&#x2F;engines are:</p>\n<ul>\n<li><a href=\"https://www.docker.com/products/container-runtime\">Docker</a> - A standardized packaging format for diverse applications</li>\n<li><a href=\"https://cri-o.io/\">CRI-O</a> - Lightweight container runtime for Kubernetes</li>\n<li><a href=\"https://openvz.org/\">OpenVZ</a> - Open source container-based virtualization for Linux</li>\n<li><a href=\"https://containerd.io/\">Containerd</a> - Container runtime with an emphasis on simplicity, robustness, and portability</li>\n<li><a href=\"https://coreos.com/rkt/\">Rkt</a> - An application container engine developed for modern production cloud-native environments</li>\n<li><a href=\"https://linuxcontainers.org/\">LXC and LXD</a> - A distro and vendor-neutral environment for the development of Linux container technologies</li>\n</ul>\n<p>Docker is the most popular one and hence, in this course, you will learn to create containers using the Docker engine.</p>\n<h3 id=\"Containers-vs-VM\"><a href=\"#Containers-vs-VM\" class=\"headerlink\" title=\"Containers vs VM\"></a>Containers vs VM</h3><h4 id=\"What-is-a-VM\"><a href=\"#What-is-a-VM\" class=\"headerlink\" title=\"What is a VM?\"></a>What is a VM?</h4><p>A VM is like a complete computer, with its own copy of an operating system and <em>virtual</em> hardware. Just as with containers, a single physical machine (the host machine) can run many virtual machines to scale the number of isolated applications. While virtual machines work well for scaling applications, since they virtualize an entire machine, they can be resource-intensive. This is where containers can be an improvement.</p>\n<ul>\n<li><p><strong>How multiple VMs are managed on a host machine?</strong><br>Each VM has a complete OS, and multiple VMs can run on the same host. The host operating system runs the VMs using a <strong>hypervisor</strong>, which is special software that creates and manages the VMs. The hypervisor maintains the isolation of the VMs with each other.</p>\n</li>\n<li><p><strong>How multiple containers are managed on a host machine?</strong><br>Containers bundle together an application with its dependencies. Unlike VMs, containers do not have a separate OS or virtualized hardware. They share a single operating system kernel. In practice, the containers are managed by a <strong>container manager</strong>, which serves a role analogous to the hypervisor in a VM scenario.</p>\n</li>\n</ul>\n<h4 id=\"How-to-create-VMs\"><a href=\"#How-to-create-VMs\" class=\"headerlink\" title=\"How to create VMs?\"></a>How to create VMs?</h4><p>If you want to create a VM (a complete computer) locally, you can use either of the following software (called Hypervisors):</p>\n<ul>\n<li><a href=\"https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/quick-create-virtual-machine\">Microsoft Hyper-V</a></li>\n<li><a href=\"https://www.virtualbox.org/manual/ch01.html\">Oracle VM VirtualBox</a></li>\n<li><a href=\"https://www.vmware.com/\">VMWare</a></li>\n<li><a href=\"https://www.parallels.com/\">Parallels Desktop</a></li>\n</ul>\n<p>We will not get into the details and types of hypervisors because it is beyond this course’s scope. Also, most of the cloud service providers offer you to create VM on their infrastructure, such as:</p>\n<ul>\n<li><a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts.html\">AWS EC2</a></li>\n<li><a href=\"https://cloud.google.com/compute/docs/instances\">GCP Compute Engines</a></li>\n<li><a href=\"https://azure.microsoft.com/en-in/services/virtual-machines/\">Azure Virtual Machines</a></li>\n</ul>\n<p>Creating VMs is also beyond the current course’s scope, but it is important to understand the relative difference between a container and a VM.</p>\n<blockquote>\n<p>Just as with containers, a single physical machine (the host machine) can run many virtual machines to scale the number of isolated applications.</p>\n</blockquote>\n<h4 id=\"Problem-with-VMs\"><a href=\"#Problem-with-VMs\" class=\"headerlink\" title=\"Problem with VMs\"></a>Problem with VMs</h4><p>Earlier, we learned that a VM is like a complete computer, with its own copy of an operating system and virtual hardware. While virtual machines work well for scaling applications, they can be resource-intensive since they virtualize an entire machine. This is where containers can be an improvement when you want to scale up your application.</p>\n<h4 id=\"Why-containers-are-light-weight\"><a href=\"#Why-containers-are-light-weight\" class=\"headerlink\" title=\"Why containers are light-weight?\"></a>Why containers are light-weight?</h4><p>Containers run on the shared host OS instead of virtualizing an entire OS and hardware. Containers share the operating system kernel and partitioning the operating system’s resources. There are no virtual operating systems or virtual hardware in the container model, which reduces the total resources needed to run them.</p>\n<h4 id=\"Summary-Benefits-of-using-Containers-versus-VMs\"><a href=\"#Summary-Benefits-of-using-Containers-versus-VMs\" class=\"headerlink\" title=\"Summary: Benefits of using Containers versus VMs\"></a>Summary: Benefits of using Containers versus VMs</h4><p>There are several benefits of using Containers over VMs:</p>\n<ul>\n<li><p><strong>Size:</strong> Containers are much smaller than Virtual Machines (VM) and run as isolated processes versus virtualized hardware. VMs can be in GBs while containers are in MBs.</p>\n</li>\n<li><p><strong>Speed:</strong> Virtual Machines can be slow to boot and take minutes to launch. A container can spawn much more quickly typically in seconds.</p>\n</li>\n<li><p><strong>Composability:</strong> Containers are designed to be programmatically built and are defined as source code. Virtual Machines are often replicas of a conventional computer system.</p>\n</li>\n</ul>\n","categories":["Server Deployment","Python"],"tags":["Server Deployment","Python"]},{"title":"Test-Anatomy of Java","url":"/posts/f5f5a5e6/","content":"<h1 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\"Function:\"></a><strong>Function</strong>:</h1><p>the smallest building block in java programs, to perform a task ( the button on the  remote control of TV )  </p>\n<h1 id=\"the-parts-of-a-function\"><a href=\"#the-parts-of-a-function\" class=\"headerlink\" title=\"the parts of a function\"></a>the parts of a function</h1><ol>\n<li><p><strong>Return Type</strong> : <strong>void</strong>&#x2F;value&#x2F;…  </p>\n</li>\n<li><p><strong>the name of the function</strong>: send email…( clearly identifies the purpose of the function)  </p>\n</li>\n<li><p><em>parenthese</em> <strong>(parameters)</strong>: who’s the receiver what is the subject&#x2F;content of the email   </p>\n</li>\n<li><p><em>a pair of curly braces</em> <strong>{</strong> <em>&#x2F;&#x2F;put the left brace on the same line where we define our function in Java</em><br>… the actual Java code <strong>method in Java</strong> (the function that is part of a class)<br><strong>}</strong>  </p>\n</li>\n<li><p><strong>main function</strong>: every Java program need at least one function called this, is the entry point to our programs whenever we execute a Java  program.  </p>\n</li>\n<li><p><strong>class</strong>: a <strong>container</strong> for one or more related functions. Used to organize our codes. Functions in Java don’t exixt on their own (but can exist in Python), they belong to a class.  </p>\n</li>\n<li><p><strong>main class</strong>: every Java program need at least one class called this that contain the main function<br><em><strong>class(key word) + proper descriptive name {</strong></em>  </p>\n</li>\n<li><p><strong>function</strong>: exists outside of a class<br><strong>method</strong>: when a function belongs to a class we refer to it as a method of that class  </p>\n</li>\n<li><p><strong>access modifier</strong>: <em>public&#x2F;private&#x2F;…</em> all the classes and functions should have this. A special keyword determine whether other classes and methods in this program can access to these classes and methods.  </p>\n</li>\n<li><p><strong>PascalNamingConvention</strong>–&gt; Classes<br><strong>camelNamingConvention</strong>–&gt; Methods</p>\n</li>\n</ol>\n<pre><code>public class Main &#123;  \n      public void main() &#123;  \n      ...  \n      &#125;  \n  &#125;  \n</code></pre>\n","categories":["Web Develope","Backend","JAVA"],"tags":["JAVA"]}]